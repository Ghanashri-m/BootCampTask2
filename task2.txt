1. Differences between pass by value and pass by reference

Pass by value                                             | Pass by reference
1. All the primitive data type values are passed by value | 1. All the Composite data type values are passed by reference
   (undefined, null, number, string, boolean)             |    (object, function, array)  
2. New memory location is created when primitive variable | 2. When a variable of composite data, is copied to another variable, 
   is copied to another variable.                         |    both of them point to same memory location.
   EX: var a = 5;                                         |    (Ex: var a = {language: JavaScript};
       var b = a;                                         |         var b = a;
    (Now both a and b are pointing                        |        (Now both a and b are pointing to same memory location))
          to 2 different m/m locations)                   |     
3. Changing one variable doesn't affect the variable      | 3. Changing one variable changes the other variable ,
   it is copied into. (Ex: changing a won't affect b)     |    to which the values are copied into or copied from.
    Ex: var a = 5;                                        |    Ex: var a = {language: JavaScript};
        var b = a;                                        |        var b = a;
        console.log(a, b) // 5, 5                         |        console.log(a, b) // {language: JavaScript}, {language: JavaScript};
        a = 1;                                            |        a = {language: Python};
        console.log(a, b) // 1, 5                         |        console.log(a, b) // {language: Python}, {language: Python}

For better understanding of pass by reference, 

Ex 1: 

function changeStuff(a, b, c)
{
  a = a * 10;
  b.item = "changed";
  c = {item: "changed"}; // c now references to a different object instead of obj2
}

var num = 10;
var obj1 = {item: "unchanged"};
var obj2 = {item: "unchanged"};

changeStuff(num, obj1, obj2); // a = num, b = obj1, c = obj2

console.log(num);  // 10
console.log(obj1.item); // {item: "changed"};
console.log(obj2.item); // {item: "unchanged"}; // because here, we are changing the reference not the value.

The above example, in simpler terms, is essentially same as below,

Ex 2: 

var a = {languge: 'Javascript'};
var b = {languge: 'Python'};

var c = a; // modifying c.language, also modifies a.language.

console.log(a, b, c); // {languge: 'Javascript'}, {languge: 'Python'}, {languge: 'Javascript'}

c = b; // // modifying c.language, only modifies b.language, but not a, because c is now referencing to different object b.

console.log(a, b, c); // {languge: 'Javascript'}, {languge: 'Python'}, {languge: 'Python'}

--------------------------------------------------------------------------------------------------------------------------------------------------------------

2. How to copy by value a composite data type?

There are 3 ways to copy by value for composite data types.

i.   Using the spread (...) operator // This performs shallow copy
ii.  Using the Object.assign() method // This performs shallow copy
iii. Using the JSON.stringify() and JSON.parse() methods // This performs deep copy

Arrays:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a. Copy by value using spread operator :

    Ex :
    var a = [1, 2, 3, 4];

    var c = [...a];
    c[3] = 8;
    console.log(a, c); // [1, 2, 3, 4], [1, 2, 3, 8]

b. Copy by value using Object.assign

    Ex : 
    var a = [1, 2, 3, 4];

    var c = Object.assign([], a); // empty array as 1st argument is to ensure that we don't modify original data
    c[3] = 8;
    console.log(a, c); // [1, 2, 3, 4], [1, 2, 3, 8]

c. Copy by value using JSON.stringify()

    Ex : 
    var a = [1, 2, 3, 4];

    var c = JSON.parse(JSON.stringify(a));
    c[3] = 8;
    console.log(a, c); // [1, 2, 3, 4], [1, 2, 3, 8]

d. A workaround, to copy by value an array.
  
   Ex: 
   var a = [1, 2, 3, 4];
   var c = a.slice();
   c[3] = 8;
   console.log(a, c); // [1, 2, 3, 4], [1, 2, 3, 8]

Object:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a. Copy by value using spread operator

    Ex : 
    var a = {language: 'JavaScript'};

    var c = {...a};
    c.language = 'Python;
    console.log(a, c); // {language: 'JavaScript'}, {language: 'Python'}

b. Copy by value using Object.assign

    Ex : 
    var a = {language: 'JavaScript'};

    var c = Object.assign({}, a); // empty object as 1st argument is to ensure that we don't modify original data
    c.language = 'Python;
    console.log(a, c); // {language: 'JavaScript'}, {language: 'Python'}

c. Copy by value using JSON.stringify()

    Ex : 
    var a = {language: 'JavaScript'};

    var c = JSON.parse(JSON.stringify(a));
    c.language = 'Python;
    console.log(a, c); // {language: 'JavaScript'}, {language: 'Python'}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
